Python Practice Questions

===========================

Topic 1: Recursion

Easy: 1. Write a recursive function to calculate factorial of a number.
2. Write a recursive function to compute the nth Fibonacci number. 3.
Write a recursive function to calculate the sum of first N natural
numbers. 4. Write a recursive function to reverse a string. 5. Write a
recursive function to count digits in a number.

Medium: 1. Write a recursive function to find the GCD of two numbers. 2.
Write a recursive function to check if a string is palindrome. 3. Write
a recursive function to find the sum of elements in a list. 4. Write a
recursive function to compute power of a number (x^n). 5. Write a
recursive function to count vowels in a string.

Hard: 1. Write a recursive function to generate all permutations of a
string. 2. Write a recursive function to solve Tower of Hanoi for n
disks. 3. Write a recursive function to perform binary search in a
sorted list. 4. Write a recursive function to find all subsets of a set.
5. Write a recursive function to flatten a nested list.

Topic 2: List Comprehensions & Generator Expressions

Easy: 1. Create a list comprehension to generate squares of numbers from
1 to 10. 2. Create a list comprehension to get even numbers from 1 to
20. 3. Create a list comprehension to extract vowels from a string. 4.
Create a list comprehension to convert list of strings to uppercase. 5.
Create a list comprehension to generate a list of first letters of words
in a sentence.

Medium: 1. Use list comprehension to flatten a 2D list. 2. Use generator
expression to generate Fibonacci sequence up to n. 3. Create a list
comprehension that filters prime numbers from 1 to 50. 4. Use list
comprehension to generate tuples of (number, square). 5. Create a list
comprehension to remove duplicates from a list.

Hard: 1. Use nested list comprehension to transpose a matrix. 2. Use
generator expression to generate an infinite sequence of odd numbers. 3.
Create a list comprehension to find common elements between two lists.
4. Write a generator expression to yield permutations of a list. 5. Use
list comprehension to implement matrix multiplication.

Topic 3: Lambda Functions

Easy: 1. Write a lambda function to add two numbers. 2. Write a lambda
function to find maximum of two numbers. 3. Write a lambda function to
check if a number is even. 4. Write a lambda function to compute square
of a number. 5. Write a lambda function to extract last character of a
string.

Medium: 1. Write a lambda function to sort a list of tuples by the
second element. 2. Write a lambda function to check if a string is
palindrome. 3. Write a lambda function to filter numbers divisible by 3
from a list. 4. Write a lambda function to compute cube of each element
in a list. 5. Write a lambda function to sort dictionary by values.

Hard: 1. Use lambda to implement a function that returns nth Fibonacci
number. 2. Use lambda inside map to convert a list of temperatures from
Celsius to Fahrenheit. 3. Use lambda inside reduce to find the product
of numbers in a list. 4. Use lambda to sort a list of dictionaries by a
nested key. 5. Use lambda to implement a function composition mechanism.

Topic 4: Map, Filter, Reduce

Easy: 1. Use map to square each number in a list. 2. Use filter to
extract even numbers from a list. 3. Use map to convert a list of
strings to uppercase. 4. Use reduce to compute sum of list elements. 5.
Use filter to extract strings with length > 3.

Medium: 1. Use map and filter to get cubes of even numbers from 1 to 20.
2. Use reduce to find maximum element in a list. 3. Use map to add
corresponding elements of two lists. 4. Use filter to extract prime
numbers from 1 to 50. 5. Use reduce to compute factorial of a number.

Hard: 1. Use map and reduce to compute dot product of two vectors. 2.
Use reduce to concatenate list of strings into one string. 3. Use filter
to get palindromic words from a list of strings. 4. Use map and reduce
to evaluate polynomial for a given x. 5. Use reduce to implement GCD of
a list of numbers.

Topic 5: File Handling (txt, csv, json)

Easy: 1. Write a program to create a text file and write “Hello,
Python!” into it. 2. Write a program to read contents of a text file and
print it. 3. Write a program to append a new line to an existing text
file. 4. Write a program to count number of words in a text file. 5.
Write a program to write a list of strings into a text file.

Medium: 1. Write a program to read a CSV file and print its contents. 2.
Write a program to write a dictionary into a JSON file. 3. Write a
program to read a JSON file and print its keys. 4. Write a program to
count number of lines in a text file. 5. Write a program to copy
contents of one text file to another.

Hard: 1. Write a program to merge contents of multiple text files into
one. 2. Write a program to read a CSV file and convert it into JSON
format. 3. Write a program to parse JSON data and print it in tabular
format. 4. Write a program to search for a word in a text file and print
line numbers where it appears. 5. Write a program to read a CSV file and
compute average of numeric columns.
