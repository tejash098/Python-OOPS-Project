=== Recursion ===

EASY QUESTIONS
1. Write a recursive function to compute the factorial of a number.
2. Write a recursive function to print all numbers from n down to 1.
3. Write a recursive function to compute the nth Fibonacci number.
4. Write a recursive function to sum all elements in a list.
5. Write a recursive function to reverse a string.

MEDIUM QUESTIONS
1. Write a recursive function to find the greatest common divisor (GCD) of two numbers.
2. Write a recursive function to compute the sum of digits of a non-negative integer.
3. Write a recursive function to check if a string is a palindrome.
4. Write a recursive function to flatten a nested list.
5. Write a recursive function to find the maximum element in a list.

HARD QUESTIONS
1. Write a recursive function for binary search on a sorted list.
2. Write a recursive function to generate all permutations of a string.
3. Write a recursive solution for the Tower of Hanoi problem.
4. Write a recursive function to solve the N-Queens problem for an n x n chessboard.
5. Write a recursive function to generate all subsets (the power set) of a list.

=== List Comprehensions & Generator Expressions ===

EASY QUESTIONS
1. Use a list comprehension to create a list of squares from 1 to 10.
2. Write a generator expression to yield even numbers up to 20.
3. Use a list comprehension to filter odd numbers from a given list.
4. Create a list of lengths of words from a given sentence using a list comprehension.
5. Write a generator expression to produce cubes of numbers from 1 to 10.

MEDIUM QUESTIONS
1. Use a list comprehension to flatten a 2D list.
2. Write a generator expression to yield Fibonacci numbers up to n.
3. Use a list comprehension to extract the first letter of each word from a list of strings.
4. Use a list comprehension to find all prime numbers in a given range.
5. Write a generator expression to yield lines from a file one by one.

HARD QUESTIONS
1. Write a nested list comprehension to transpose a matrix.
2. Use list comprehensions to generate all pairs (i, j) such that 1 <= i < j <= 5.
3. Write a generator that yields all permutations of a given list.
4. Create a generator expression to filter palindromic words from a large file, line by line.
5. Use a list comprehension to create Pascal's Triangle up to n rows.
=== Lambda Functions ===

EASY QUESTIONS
1. Write a lambda function to add two numbers.
2. Define a lambda that returns the square of a number.
3. Use a lambda function to check if a number is even.
4. Write a lambda to multiply three numbers.
5. Use a lambda function to reverse a string.

MEDIUM QUESTIONS
1. Sort a list of tuples (name, age) by age using a lambda as the key in sorted().
2. Create a list of lambda functions that each take an integer and return its factorial (using map and lambdas).
3. Filter words in a list by length using a lambda with filter().
4. Write a lambda that checks whether a given string is a palindrome.
5. Map a list of strings to their integer lengths using a lambda function.

HARD QUESTIONS
1. Create a lambda function that returns a function which is itself a lambda (closure).
2. Use a lambda inside reduce to concatenate a list of strings with a separator.
3. Sort a list of dictionaries by a nested key using a lambda as the key.
4. Write a lambda that composes two given functions.
5. Combine map, filter, and lambda to return the squares of even numbers in a list.
=== Map, Filter, Reduce ===

EASY QUESTIONS
1. Use map to double each element in a list.
2. Use filter to select numbers greater than 10 from a list.
3. Use reduce to find the product of all elements in a list.
4. Use map to convert a list of strings to upper case.
5. Use filter to keep only positive numbers from a list.

MEDIUM QUESTIONS
1. Combine map and filter to get squares of odd numbers from a list.
2. Use reduce to concatenate a list of strings into a paragraph.
3. Use map to convert a list of Celsius temperatures to Fahrenheit.
4. Use filter with a lambda to select palindromic strings from a list.
5. Use reduce to find the maximum value in a list without using max().

HARD QUESTIONS
1. Chain map, filter, and reduce to process a list: double all numbers, filter those divisible by 4, and sum the result.
2. Use map to process a list of dictionaries and extract a certain key's value from each.
3. Combine map with a custom function to flatten a list of lists.
4. Use reduce to implement intersection of multiple sets.
5. Create a pipeline using map, filter, and reduce to normalize and aggregate a dataset.
=== File Handling (txt, csv, json) ===

EASY QUESTIONS
1. Write code to read all lines from a text file.
2. Write code to append a line to a text file.
3. Write code to read a CSV file as a list of lists.
4. Write code to load a JSON object from a file.
5. Write code to write a string to a text file.

MEDIUM QUESTIONS
1. Write code to count the number of lines in a text file.
2. Write code to read a CSV file and print only rows where the value in the second column is greater than 100.
3. Write code to update a JSON file with a new key-value pair.
4. Write code to write a list of dictionaries to a CSV file.
5. Write code to read all unique words from a text file.

HARD QUESTIONS
1. Write code to merge two CSV files into one, removing duplicates.
2. Write code to parse a large JSON file and extract all values of a specific key.
3. Write code to count the frequency of each word in a large text file and write the result to a CSV file.
4. Write code to read a CSV file and convert selected rows to JSON objects.
5. Write code to recursively search for all text files in a directory and print their paths.
